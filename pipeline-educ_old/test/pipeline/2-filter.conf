filter {

  ########################################################################
  # Extract "Unexpected exception" errorCode
  ########################################################################
  if [loggerName] == "com.hlag.fis.commons.ui.api.adapter.ws.UnexpectedExceptionMapper" {
    grok {
      match => { "message" => "Unexpected exception \(hash: %{WORD:errorCode}\)" }
      tag_on_failure => ["Failed to extract errorCode"]
    }
  }  

  ########################################################################
  # Extract log event's timestamp from the Jog4J JSON input.
  ########################################################################
  if [instant][nanoOfSecond] {
    # calculate Unix Epoch Timestamp (ms) from "instant.epochSecond" and "instant.nanoOfSecond"
    ruby {
      code => "event.set('tmp_epoch', event.get('[instant][epochSecond]') * 1000 + event.get('[instant][nanoOfSecond]')/1000000)"
    }

    date {
      match => [ "tmp_epoch", "UNIX_MS" ]
      remove_field => ["tmp_epoch"]
    }
  } else {
    date {
      match => [ "timeMillis", "UNIX_MS" ]
    }
  }

  ########################################################################
  # Catch up to 10 Throwables and their causes
  # Extract the name of every throwable and put it into the "throwable" 
  # field.
  # The result is an array of Throwable/Exception names.
  ########################################################################
  if [thrown][name] {
    mutate {
      add_field => { "throwable" => "%{[thrown][name]}" }
    }
    if [thrown][cause][name] {
      mutate {
        add_field => { "throwable" => "%{[thrown][cause][name]}" }
      }
      if [thrown][cause][cause][name] {
        mutate {
          add_field => { "throwable" => "%{[thrown][cause][cause][name]}" }
        }
        if [thrown][cause][cause][cause][name] {
          mutate {
            add_field => { "throwable" => "%{[thrown][cause][cause][cause][name]}" }
          }
          if [thrown][cause][cause][cause][cause][name] {
            mutate {
              add_field => { "throwable" => "%{[thrown][cause][cause][cause][cause][name]}" }
            }
            if [thrown][cause][cause][cause][cause][cause][name] {
              mutate {
                add_field => { "throwable" => "%{[thrown][cause][cause][cause][cause][cause][name]}" }
              }
              if [thrown][cause][cause][cause][cause][cause][cause][name] {
                mutate {
                  add_field => { "throwable" => "%{[thrown][cause][cause][cause][cause][cause][cause][name]}" }
                }
                if [thrown][cause][cause][cause][cause][cause][cause][cause][name] {
                  mutate {
                    add_field => { "throwable" => "%{[thrown][cause][cause][cause][cause][cause][cause][cause][name]}" }
                  }
                  if [thrown][cause][cause][cause][cause][cause][cause][cause][cause][name] {
                    mutate {
                      add_field => { "throwable" => "%{[thrown][cause][cause][cause][cause][cause][cause][cause][cause][name]}" }
                    }
                    if [thrown][cause][cause][cause][cause][cause][cause][cause][cause][cause][name] {
                      mutate {
                        add_field => { "throwable" => "%{[thrown][cause][cause][cause][cause][cause][cause][cause][cause][cause][name]}" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  ########################################################################
  # Remove the "thrown.cause" sub-tree because it contains lots of 
  # redundant data
  ########################################################################
  if [thrown][cause] {
    mutate {
      remove_field => [ "[thrown][cause]" ]
    }
  }

  ########################################################################
  # FIS3 - Profiler
  # Handle "profiler" logging. 
  # Extract class, method, duration information
  ########################################################################
  if [loggerName] == "Profiler" {
    grok {
      match => { "message" => "%{DATA:profilerclass}#%{DATA:profilermethod}:%{NUMBER:profilerduration}ms" }
      tag_on_failure => ["Failed to extract Profiler metadata"]
    }
    if [profilerclass] {
      mutate {
        rename => {
          "profilerclass"    => "[profiler][class]"
          "profilermethod"   => "[profiler][method]"
          "profilerduration" => "[profiler][duration]"
        }
        convert => {
          "[profiler][duration]" => "integer"
        }
      }
    }
  }
}

